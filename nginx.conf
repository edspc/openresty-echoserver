pcre_jit on;
user root root;

events {
    worker_connections 1024;
}

env HOSTNAME;

http {
    default_type 'text/plain';
    # maximum allowed size of the client request body. By default this is 1m.
    # Request with bigger bodies nginx will return error code 413.
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size
    client_max_body_size 10m;

    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    init_by_lua_block {
        local template = require("resty.template")
        -- template syntax documented here:
        -- https://github.com/bungle/lua-resty-template/blob/master/README.md
        tmpl = template.compile([[

Hostname: {{os.getenv("HOSTNAME") or "N/A"}}

Server values:
    server_version=nginx: {{ngx.var.nginx_version}} - lua: {{ngx.config.ngx_lua_version}}

Request Information:
    client_address={{ngx.var.remote_addr}}
    method={{ngx.req.get_method()}}
    uri={* ngx.var.uri*}
    request_uri={* ngx.var.request_uri*}
    query={{ngx.var.query_string or ""}}
    request_version={{ngx.req.http_version()}}
    request_scheme={{ngx.var.scheme}}
    full_request_uri={*ngx.var.scheme.."://"..ngx.var.host..":"..ngx.var.server_port..ngx.var.request_uri*}
    request_id={{ngx.var.request_id}}
    formatted_id={{ngx.var.formatted_id}}

Request Headers:
{% for i, key in ipairs(keys) do %}
    {{key}}={*headers[key]*}
{% end %}

Request Body:
{{ngx.var.request_body or "    -no body in request-"}}
]])
    }

    map $request_id $formatted_id {
        "~*(?<p1>[0-9a-f]{8})(?<p2>[0-9a-f]{4})(?<p3>[0-9a-f]{4})(?<p4>[0-9a-f]{4})(?<p5>.*)$" "${p1}-${p2}-${p3}-${p4}-${p5}";
    }

    server {
        listen 8080 default_server reuseport;
        server_name _;

        error_page 403 @403;

        real_ip_header X-Forwarded-For;
        set_real_ip_from 172.17.0.0/16;
        set_real_ip_from 10.244.0.0/16;
        set_real_ip_from 10.110.0.0/16;

        more_set_headers "X-Request-ID: $request_id";

        location / {
            auth_request /auth;

            lua_need_request_body on;
            content_by_lua_block {
                ngx.header["Server"] = "echoserver"

                local headers = ngx.req.get_headers()
                local keys = {}
                for key, val in pairs(headers) do
                    table.insert(keys, key)
                end
                table.sort(keys)

                ngx.say(tmpl({os=os, ngx=ngx, keys=keys, headers=headers}))
            }
        }

        location /requests/ {
            alias /requests/;
        }

        location = /auth {
            internal;
            content_by_lua_block {
                local fname = "/requests/"..ngx.var.request_id
                local file, err = io.open(fname, "w+b")

                if file == nil then
                    ngx.say("Couldn't open file: " .. err)
                else
                    local headers = ngx.req.get_headers()
                    local keys = {}
                    for key, val in pairs(headers) do
                        table.insert(keys, key)
                    end
                    table.sort(keys)
                    file:write(tmpl({os=os, ngx=ngx, keys=keys, headers=headers}))
                    file:close()
                end

                if (ngx.var.request_uri == "/success") then
                    return ngx.exit(200)
                end

                return ngx.exit(403)
            }
        }
        

        location @403 {
            lua_need_request_body on;
            content_by_lua_block {
                ngx.say('Access denied. Request ID: '..ngx.var.request_id)
            }
        }
    }
}
